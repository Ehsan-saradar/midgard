// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	AverageActiveBond  *string `json:"averageActiveBond,omitempty"`
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`
	MaximumActiveBond  *string `json:"maximumActiveBond,omitempty"`
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`
	MedianActiveBond   *string `json:"medianActiveBond,omitempty"`
	MedianStandbyBond  *string `json:"medianStandbyBond,omitempty"`
	MinimumActiveBond  *string `json:"minimumActiveBond,omitempty"`
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`
	TotalActiveBond    *string `json:"totalActiveBond,omitempty"`
	TotalStandbyBond   *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {
	ActiveBonds             *[]string     `json:"activeBonds,omitempty"`
	ActiveNodeCount         *int          `json:"activeNodeCount,omitempty"`
	BlockRewards            *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics             *BondMetrics  `json:"bondMetrics,omitempty"`
	BondingROI              *string       `json:"bondingROI,omitempty"`
	NextChurnHeight         *string       `json:"nextChurnHeight,omitempty"`
	PoolActivationCountdown *int64        `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string       `json:"poolShareFactor,omitempty"`
	StakingROI              *string       `json:"stakingROI,omitempty"`
	StandbyBonds            *[]string     `json:"standbyBonds,omitempty"`
	StandbyNodeCount        *int          `json:"standbyNodeCount,omitempty"`
	TotalReserve            *string       `json:"totalReserve,omitempty"`
	TotalStaked             *string       `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {
	Ed25519   *string `json:"ed25519,omitempty"`
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetEarned      *string `json:"assetEarned,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStaked      *string `json:"assetStaked,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`
	PoolEarned       *string `json:"poolEarned,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolStaked       *string `json:"poolStaked,omitempty"`
	RuneEarned       *string `json:"runeEarned,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStaked       *string `json:"runeStaked,omitempty"`
	StakeUnits       *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Network Data// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Rc+27bOJd/FUK7C7SA6zjOpZ38tXaTzgT79YIk8y0Ws8WAlo5tthKpkJRjf0Vea19g",
	"X2zBQ0qWLVKS3fYDFvNfapHn/M7hufLSb1Esslxw4FpFV98iCSoXXAH+Y6IUaHUNmrIUkjv3yXyJBdfA",
	"tfmT5nnKYqqZ4CdflODmNxUvIaPmL6YhQ1r/KmEeXUX/crLld2KHqRPkY9lEz4NIb3KIriIqJd1Ez8/P",
	"gygBFUuWGx7RVSRmXyDWxGCgjDO+IImDSKihRBifC5khJEPvV+AgaXojpZBHCdGGHan6UIL5QDJQii7A",
	"wPgNaKqXRwHIpchBamaXJaY6XjK++LPIzT+dumZCpEBR4IRqOqOWR/OriinnIH8Dtlgib6us6CpiXF+e",
	"R9UCMK5hAUa46ierep+4d6ALyRWhnCxRUKI01YUiYk7es2RBZWKYfwD9JOTXH74Mju4tn4sOdE3rcXOJ",
	"URtiFAn8B2x+nr07Bn1s/SDgn4RI/wnuath8j7fmQqSImcyFJHpJtfXbSoSfB73i04UaPxjbxRnKTLnX",
	"9CtINUkSCUpdU01/uBU3WbRjS1Oil4AKVfiXQgKEKfzLKJvxOnYMtMci76XhfU7HmUiJvrISSlQOMZuz",
	"uJSR8mRrNo7rTxfrMNNxy6O2c+811epnmI0OWktTuYtUzGhKpjef7p9oXkWPh6WQ8ZIyfsOTXDD+E4A2",
	"WfgQ/wqa2LhXC3s2VADJpVgzSKzN/0mtp4Ai4CgOUZS1+hF5VhS8X4IcRHqtetvSw9pGT581HZZpK1PT",
	"knJFYzNCIRXHq6riXLxuyGg9qG/UTKiGtxKohqSnXnLJYrgreL0WUVoyvvAJO4imqYi/3sETlYlqop1t",
	"v3roDaKZ4EnLZ3TE4HcvHMGT96Aliz1o6AokXcAk1mwFZqT5cXetJnYIMcAwJOBYwkUCaquvLUJH8l5T",
	"nsw2/WgqOzhMNKNrlhVZG873dM14kfXG6Ui24nxvxxyAExJGeStMHNEfJQ5vB7lLsRsj4526NJo8RJeW",
	"ZDvMPZqdOLXQNG1D+WAG9MaI5FoR7tLrwOdzNdtINZwMyp+bJCQ8FkyaUPSHG/bZQ7feGTRduNKQ8jha",
	"GV2tHokdNtgG+aaadoL5wJE35f7bMpfssvhQZDOQNR4fdhVWi6SzvcjYFrB3oqiLi7Uw1jq1NtTNZHxx",
	"9/HWKzCHtX67LCTfdpONMSZTo3SYdVERiXjiHhNaApGQuSpFswyMYrBboNV88oJxoiA2a/EyGvTKQUKk",
	"90sq4R2NtdeYbGpokVNtTb/NUJyHHGEpjkEvUym5hG0F3fUOFMgVhFw1hbkmjJNyWIvXf4Wgw5vUTuwQ",
	"Qwzbt37+XjbBTY9PxhcXp780OboPJC9mKYvJV9j4QCuI8/HF5dfTJoHqUysJH9hay/udJRS11ViulyGV",
	"xoWUwDXBuo3MaEp57F0eJOUsds8gcaq0NbTghPEVKJ2ZGjhEx64hIggBs1SVtQcPnVmxwSGdBnz3+4eb",
	"V/9djEZnMLm/v3nYLV/9lN8BuMInXBEpSEuUcwCi2D8A+4YGPxND8K+XYW6qVRdzAGXJGHYhMvcpyztR",
	"a0kTICpluR8s4+TfAvQf1p3UnRUVm7qSt6p5sc/uZbdy/i7SIoN2KzEMVzguyCKouBydrcVDEvPRGNJM",
	"6CVRLHFrYRgFKfYxIMw1c4AWGt1mEZrs9VQTWMjdx1vywpX+pX/g/obV5d3H25ctRE/HLWTFCiQ5HZNM",
	"cL0MQutlp6gcY6ZBKm0hBBPFiqaF2w9JiB0YoNXDshFPzahDpH7nTKvQgiGRwowgotCYhc3UAKmg5T+J",
	"V0+0sni79/MKK5hOu7Q0x+dL2UmXcWLGdRm7abk9JmF+xkoTjaoiMfTRkAWHXkkKl7UlRxlCXsNHG++b",
	"oQyVHgkKaYbzk0kP/RIUhikXspBoV4IypPsEGBMWPQmqwa91gR2zngmqlcwxCaoBNpSgDIPeGQpzdyNF",
	"vUBmW14vu0Xqk52QWZmewiy8roH29bDutCEc1204dm+4k1rB2WOx3UoeBDuY3siMxONL8sT0MpH0qQ9S",
	"XdgCnReZ6blnQmilJc1z9DfgdJbiXwlT9s/PPjpPZsIBIrvxxPQ30gDkC0SNsTsKceipCjd0R3pj0OWx",
	"CnkxKzYKk7ExGuU1u1KHPRj2VLevBymPIBrU792BiN0LNyuxplmemtl6xmen8y/j9PHLm2QlL/Iim8fL",
	"+DXX6fwxGa8u/5GsH5++wNP8wieY5zyq0f7gRjx2wN97CucazhsqebjhtCWEmBOgkjO+qAU5QmMplMJz",
	"F0Q1DDa1/q5pW4GVJEwN1UKmvTd2dc5B+FoWfnuk9iNa0JCW/17q117+QDVDQuZSZJVTDA/rRrEOneNs",
	"F35ZAh2NqGd1MuNbNWRWvV4sCdXwjklVI9Zjn2iJe1h/owdOMxo52maHB3ULpYViw1CZ1U4j1F6cB+qw",
	"el0erAc7LQZJ9baXcGW4NResLo1Yw/aqsM1aakVhOJ8HeoQ7yCUo40VEPHGQaslyDA8hsQLuqwOxM6Es",
	"3did39+VN7ZfmxHl9nxhxpAXLjFuzz5rmfGl3x1YunlYh6h3ZX7sHTtwvrdjdpC20PKBKUl0wTGq78yz",
	"Dkfu348sz0dMIJkWm2B3OCs2+8VBO7F7UyME8wGkaW9yrd0X2rTrusIk2oOSc9QyjBB045cduc63bttk",
	"11u4g/JmJ7IwqF5gAhZtKewXoa5qbqnDkWZ7E7InWVlwUJfXkFdCFOMxBmWphx2MArsHBzArtxaCjP6z",
	"qnFDjMrSttsKfFGycTXEU+W4Atd3noJT/cdPxezPr/ac4RgYnnN/t/fR/75HQ7Qe9z4G0faaiCdvaOhZ",
	"ncCqvNrbBhFHmeEL2jnWDKmqJa/K7Uq00dBrM07k1kA6BtthOKHor3XLYr/DwJ6xb6HcbHlVEce2x5Iw",
	"L7i/w7U/1CY90TxyhUY0iApe/iXdCe3AmHbkwNk1aGHwXFbKfkcQVvt7rpOVCdNfdPdUic9MDcP+d58Q",
	"nmddrAE2cM8B/OexKcvDV3yqaq6HwzuD/6epyxmzp4XbZBloufEHMclieKByEVj1MvZOqWLqUxW3esiv",
	"1wcG2nK5u1ZZ2Rs4mfCff69vr3shfMZ4Yu9u4B3GGDUAGZ7FRgms1L/rMsAOhbQFb+NegbuCTj7Zg9/J",
	"p1vyWIBkoMjDbx/v3prZ9kop3xCkpUjKuKlDVoxiMzJlc/m//6M0Dssl5FRi7V29NSB0JgqNY7m7ma0F",
	"mQGRQBMs41eUpXSW2k1fdwaNpfKQGJAGVU6lKenrO6HoG+4qrGmrdgErLQwOvYTMZHGKFydeKStb+RLA",
	"AMlwP9J8TCAHnhiipQ6Aqs2wUlIiQBEuNFmKNCGxZJrFNK2LOiQPomo77G5ceZ3UnlsZOrAeuJZFLUWR",
	"JshtU4OfMAmxTjdY3jCNO1bNhYoG0Qqksmt5OhwNR68EVWfWmYDTnEVX0Zn53YRQqpdonier0xN3d/vq",
	"W+T8Zq/7KV+NNNewdt0YiQxJeesSuCgWy50pWpCEqTylG0LLgrF8iEJWVDJRKFSE1dicxqAGhPE4LRJT",
	"LKVUg9IEfdyowrgiUr5N7G1YbC3wApMRUNIMNJasf+xL9JEDEZJkQgKJRZZRooyZUg3JLrAXb3+b3H4Y",
	"3v/X++nHv72sbxn+EU0/TIcPH99/nL46vTmNBvbfbycfXo1Oz006MvklwqWMBhGnGcZxDHj1K1laFjCo",
	"Xa3dd/TPg923RuPRKBRVqnEngQdJz4PovM9070MgvC1bZBk1oRfvHttNqtv6I6LnARpUIuKgNd0/0cUC",
	"5ImzSXI2HFVGZO1kgezNWiQiLjIDzrvc1yK2BUBTPXv3WQIsdzkpj4jXJQDjeXRhbCkqf7Mify5ltq95",
	"gmK3PlAxodC9BiqlqXYCP916hbevpKJjrGPvgVVTake7lMwF6eNE23l745HDfb+2nw8XZv+hVFOaEoG7",
	"+O9kwjthx0kkEqhdjFJeqdyVsyPk2XtU5ZFnn38pk93E6SGTvQ5fE6l8gVE2u0WeC2ncQvAqX5VbRA1Z",
	"y7tsh8u6+4jpp0QnC25HQydJdUHt8MWvPyXyvc0aksl206CmvSVdoXpFzDDeVOcafnU6d/hLJzH/K73m",
	"QuO4Xe9W2yPAg30B/aDaMsY3VWlabmR5V8ydOx0dwvYfZTVFrF5V7cp38s0Bff4ur29/Ftcmcv3As8Na",
	"f68fzHvPYGd8dvplPV+OF28uHs9WI508XlzOOazWl+t4rWO+1CqLi8vzLHJ2aYrYmllWNH+yYbY8cAwt",
	"ndc8t8vXP3T3eAKIC2kLKkjqrwDLs5iO1ZzwZHuE+v9yVQd/tVAZfLYatEe8+LhvlPpIE3QPJZFCFTFt",
	"VMGtgt0bS8EgqtWx4VO3Bc9fLTrLoJLWtgTD8m1jq9DLIqN2EyGj8ZJxu1OBGxT7rcVOJ+MX1M7o1bgc",
	"y9i37hXbso+535lR9THVJhEGpe3L0W7TqN6clm9Mt49RdyjVvkuREUpSEVOTioQ0ZblPadXRwCfLYnvq",
	"cIzFtLzgbSrO4HdcrddMKo1UKlt3aSdYabg9K3eA4ZO8Ot3oCMUOFt7WAp6ANBFPQsxyBvaEn/INYfwE",
	"997WhLkNs++4B+WNeFW8PiA+3173xDd+dzk+vzx7fX1z+vqXy8uL6eTsbDyevrk8v57+8u5sNBqdvrs+",
	"ez09vxldj8eT0fTy5u3N5eRiOnr95noyPQ+A1muWHIZ4wjcuZRTKHgvalQwnkEb+aMsXPza3GRpoGA2F",
	"thy62KOW7emKV28G3EFoc7pg3G7ziPncCuujXH0MZ87GoZ57IBpdjXz/NUsLkpRlLASk/HYIDvugN7q6",
	"GHWAOirZ1x/tN8OVCyX29o1ek9mmLMsGzmBNTF6/Yok9M8BHbS6gFDI1SUfr/Ork5HT8ejgajoanV29G",
	"b0aRUeD2u/IM+Pz8fwEAAP//l/qzMCVJAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

