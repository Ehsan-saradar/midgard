// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`
	BondingROI      *string       `json:"bondingROI,omitempty"`
	NextChurnHeight *string       `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in Asset)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Value of Assets earned from the pool.
	AssetEarned *string `json:"assetEarned,omitempty"`

	// ROI of the Asset side
	AssetROI *string `json:"assetROI,omitempty"`

	// Amount of Assets staked.
	AssetStaked      *string `json:"assetStaked,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total value of earnings (in RUNE).
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average ROI (in RUNE) of both sides
	PoolROI *string `json:"poolROI,omitempty"`

	// RUNE value staked.
	PoolStaked *string `json:"poolStaked,omitempty"`

	// Value of RUNE earned from the pool.
	RuneEarned *string `json:"runeEarned,omitempty"`

	// ROI of the Rune side.
	RuneROI *string `json:"runeROI,omitempty"`

	// Amount of RUNE staked.
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Represents ownership of a pool.
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {
	BuyVolume   *string `json:"buyVolume,omitempty"`
	SellVolume  *string `json:"sellVolume,omitempty"`
	Time        *int64  `json:"time,omitempty"`
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6VqQXgWWwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

