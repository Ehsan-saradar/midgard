// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	AverageActiveBond  *string `json:"averageActiveBond,omitempty"`
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`
	MaximumActiveBond  *string `json:"maximumActiveBond,omitempty"`
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`
	MedianActiveBond   *string `json:"medianActiveBond,omitempty"`
	MedianStandbyBond  *string `json:"medianStandbyBond,omitempty"`
	MinimumActiveBond  *string `json:"minimumActiveBond,omitempty"`
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`
	TotalActiveBond    *string `json:"totalActiveBond,omitempty"`
	TotalStandbyBond   *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {
	ActiveBonds             *[]string     `json:"activeBonds,omitempty"`
	ActiveNodeCount         *int          `json:"activeNodeCount,omitempty"`
	BlockRewards            *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics             *BondMetrics  `json:"bondMetrics,omitempty"`
	BondingROI              *string       `json:"bondingROI,omitempty"`
	NextChurnHeight         *string       `json:"nextChurnHeight,omitempty"`
	PoolActivationCountdown *int64        `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string       `json:"poolShareFactor,omitempty"`
	StakingROI              *string       `json:"stakingROI,omitempty"`
	StandbyBonds            *[]string     `json:"standbyBonds,omitempty"`
	StandbyNodeCount        *int          `json:"standbyNodeCount,omitempty"`
	TotalReserve            *string       `json:"totalReserve,omitempty"`
	TotalStaked             *string       `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {
	Ed25519   *string `json:"ed25519,omitempty"`
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {
	Address *string `json:"address,omitempty"`
	Txid    *string `json:"txid,omitempty"`
	Asset   *string `json:"asset,omitempty"`
	Type    *string `json:"type,omitempty"`
	Offset  int64   `json:"offset"`
	Limit   int64   `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Network Data// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"o3ejyChw+115Bnx5+f8AAAD///30HoMpSQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

