// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/thorchain/midgard/internal/store (interfaces: Store)

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	common "gitlab.com/thorchain/midgard/internal/common"
	models "gitlab.com/thorchain/midgard/internal/models"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAddRecord mocks base method
func (m *MockStore) CreateAddRecord(arg0 models.EventAdd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddRecord indicates an expected call of CreateAddRecord
func (mr *MockStoreMockRecorder) CreateAddRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddRecord", reflect.TypeOf((*MockStore)(nil).CreateAddRecord), arg0)
}

// CreateGasRecord mocks base method
func (m *MockStore) CreateGasRecord(arg0 models.EventGas) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGasRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGasRecord indicates an expected call of CreateGasRecord
func (mr *MockStoreMockRecorder) CreateGasRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGasRecord", reflect.TypeOf((*MockStore)(nil).CreateGasRecord), arg0)
}

// CreateGenesis mocks base method
func (m *MockStore) CreateGenesis(arg0 models.Genesis) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenesis", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenesis indicates an expected call of CreateGenesis
func (mr *MockStoreMockRecorder) CreateGenesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenesis", reflect.TypeOf((*MockStore)(nil).CreateGenesis), arg0)
}

// CreatePoolRecord mocks base method
func (m *MockStore) CreatePoolRecord(arg0 models.EventPool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoolRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoolRecord indicates an expected call of CreatePoolRecord
func (mr *MockStoreMockRecorder) CreatePoolRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoolRecord", reflect.TypeOf((*MockStore)(nil).CreatePoolRecord), arg0)
}

// CreateRefundRecord mocks base method
func (m *MockStore) CreateRefundRecord(arg0 models.EventRefund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefundRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefundRecord indicates an expected call of CreateRefundRecord
func (mr *MockStoreMockRecorder) CreateRefundRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefundRecord", reflect.TypeOf((*MockStore)(nil).CreateRefundRecord), arg0)
}

// CreateRewardRecord mocks base method
func (m *MockStore) CreateRewardRecord(arg0 models.EventReward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRewardRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRewardRecord indicates an expected call of CreateRewardRecord
func (mr *MockStoreMockRecorder) CreateRewardRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRewardRecord", reflect.TypeOf((*MockStore)(nil).CreateRewardRecord), arg0)
}

// CreateSlashRecord mocks base method
func (m *MockStore) CreateSlashRecord(arg0 models.EventSlash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlashRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSlashRecord indicates an expected call of CreateSlashRecord
func (mr *MockStoreMockRecorder) CreateSlashRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlashRecord", reflect.TypeOf((*MockStore)(nil).CreateSlashRecord), arg0)
}

// CreateStakeRecord mocks base method
func (m *MockStore) CreateStakeRecord(arg0 models.EventStake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStakeRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStakeRecord indicates an expected call of CreateStakeRecord
func (mr *MockStoreMockRecorder) CreateStakeRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStakeRecord", reflect.TypeOf((*MockStore)(nil).CreateStakeRecord), arg0)
}

// CreateSwapRecord mocks base method
func (m *MockStore) CreateSwapRecord(arg0 models.EventSwap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwapRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwapRecord indicates an expected call of CreateSwapRecord
func (mr *MockStoreMockRecorder) CreateSwapRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwapRecord", reflect.TypeOf((*MockStore)(nil).CreateSwapRecord), arg0)
}

// CreateUnStakesRecord mocks base method
func (m *MockStore) CreateUnStakesRecord(arg0 models.EventUnstake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnStakesRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnStakesRecord indicates an expected call of CreateUnStakesRecord
func (mr *MockStoreMockRecorder) CreateUnStakesRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnStakesRecord", reflect.TypeOf((*MockStore)(nil).CreateUnStakesRecord), arg0)
}

// GetDateCreated mocks base method
func (m *MockStore) GetDateCreated(arg0 common.Asset) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDateCreated", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateCreated indicates an expected call of GetDateCreated
func (mr *MockStoreMockRecorder) GetDateCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateCreated", reflect.TypeOf((*MockStore)(nil).GetDateCreated), arg0)
}

// GetMaxID mocks base method
func (m *MockStore) GetMaxID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxID indicates an expected call of GetMaxID
func (mr *MockStoreMockRecorder) GetMaxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxID", reflect.TypeOf((*MockStore)(nil).GetMaxID))
}

// GetPool mocks base method
func (m *MockStore) GetPool(arg0 common.Asset) (common.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", arg0)
	ret0, _ := ret[0].(common.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool
func (mr *MockStoreMockRecorder) GetPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockStore)(nil).GetPool), arg0)
}

// GetPoolData mocks base method
func (m *MockStore) GetPoolData(arg0 common.Asset) (models.PoolData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolData", arg0)
	ret0, _ := ret[0].(models.PoolData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolData indicates an expected call of GetPoolData
func (mr *MockStoreMockRecorder) GetPoolData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolData", reflect.TypeOf((*MockStore)(nil).GetPoolData), arg0)
}

// GetPools mocks base method
func (m *MockStore) GetPools() ([]common.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPools")
	ret0, _ := ret[0].([]common.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPools indicates an expected call of GetPools
func (mr *MockStoreMockRecorder) GetPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPools", reflect.TypeOf((*MockStore)(nil).GetPools))
}

// GetPriceInRune mocks base method
func (m *MockStore) GetPriceInRune(arg0 common.Asset) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceInRune", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceInRune indicates an expected call of GetPriceInRune
func (mr *MockStoreMockRecorder) GetPriceInRune(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceInRune", reflect.TypeOf((*MockStore)(nil).GetPriceInRune), arg0)
}

// GetStakerAddressDetails mocks base method
func (m *MockStore) GetStakerAddressDetails(arg0 common.Address) (models.StakerAddressDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerAddressDetails", arg0)
	ret0, _ := ret[0].(models.StakerAddressDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerAddressDetails indicates an expected call of GetStakerAddressDetails
func (mr *MockStoreMockRecorder) GetStakerAddressDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerAddressDetails", reflect.TypeOf((*MockStore)(nil).GetStakerAddressDetails), arg0)
}

// GetStakerAddresses mocks base method
func (m *MockStore) GetStakerAddresses() ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakerAddresses")
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakerAddresses indicates an expected call of GetStakerAddresses
func (mr *MockStoreMockRecorder) GetStakerAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakerAddresses", reflect.TypeOf((*MockStore)(nil).GetStakerAddresses))
}

// GetStakersAddressAndAssetDetails mocks base method
func (m *MockStore) GetStakersAddressAndAssetDetails(arg0 common.Address, arg1 common.Asset) (models.StakerAddressAndAssetDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakersAddressAndAssetDetails", arg0, arg1)
	ret0, _ := ret[0].(models.StakerAddressAndAssetDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakersAddressAndAssetDetails indicates an expected call of GetStakersAddressAndAssetDetails
func (mr *MockStoreMockRecorder) GetStakersAddressAndAssetDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakersAddressAndAssetDetails", reflect.TypeOf((*MockStore)(nil).GetStakersAddressAndAssetDetails), arg0, arg1)
}

// GetStatsData mocks base method
func (m *MockStore) GetStatsData() (models.StatsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsData")
	ret0, _ := ret[0].(models.StatsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsData indicates an expected call of GetStatsData
func (mr *MockStoreMockRecorder) GetStatsData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsData", reflect.TypeOf((*MockStore)(nil).GetStatsData))
}

// GetTotalDepth mocks base method
func (m *MockStore) GetTotalDepth() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDepth")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalDepth indicates an expected call of GetTotalDepth
func (mr *MockStoreMockRecorder) GetTotalDepth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDepth", reflect.TypeOf((*MockStore)(nil).GetTotalDepth))
}

// GetTxDetails mocks base method
func (m *MockStore) GetTxDetails(arg0 common.Address, arg1 common.TxID, arg2 common.Asset, arg3 string, arg4, arg5 int64) ([]models.TxDetails, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxDetails", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]models.TxDetails)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTxDetails indicates an expected call of GetTxDetails
func (mr *MockStoreMockRecorder) GetTxDetails(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxDetails", reflect.TypeOf((*MockStore)(nil).GetTxDetails), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Ping mocks base method
func (m *MockStore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockStoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping))
}
