// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
	PriceUSD    *float64 `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *Tx     `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oSEWz03Lgo9P/w0AAP//5KL6JGVCAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

