// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"Date,omitempty"`
	Height  *int64     `json:"Height,omitempty"`
	Pool    *Asset     `json:"Pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		GAS *struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"GAS,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"StakeUnitsAdded,omitempty"`
	} `json:"Stake,omitempty"`
	Status   *string `json:"Status,omitempty"`
	Type     *string `json:"Type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"Asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"StakeUnitsSubtracted,omitempty"`
		WithdrawBP           *int64   `json:"WithdrawBP,omitempty"`
	} `json:"Withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		MEMO        *string `json:"MEMO,omitempty"`
		PriceTarget *int64  `json:"PriceTarget,omitempty"`
		TxID        *string `json:"TxID,omitempty"`
	} `json:"From,omitempty"`
	Pool   *Asset  `json:"Pool,omitempty"`
	Status *string `json:"Status,omitempty"`
	To     *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		Date *time.Time `json:"Date,omitempty"`
		Fee  *int       `json:"Fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Gas,omitempty"`
		Height *int64   `json:"Height,omitempty"`
		MEMO   *string  `json:"MEMO,omitempty"`
		Slip   *float64 `json:"Slip,omitempty"`
		TxID   *string  `json:"TxID,omitempty"`
	} `json:"To,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//Wrp88089AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
