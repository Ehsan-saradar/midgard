// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	Name        *string `json:"name,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// EventDetails defines model for EventDetails.
type EventDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// EventsResponse defines model for EventsResponse.
type EventsResponse []EventDetails

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get events by address, asset or tx-id// (GET /v1/events)
	GetEvents(ctx echo.Context, params GetEventsParams) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/events", wrapper.GetEvents)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"H4sIAAAAAAAC/+xb627bOPZ/FUL//wIJ4NhJepkinzZpMzMBtk2QpLNYzBYDWjq22ZFIhaQce4K81r7A",
	"vtjiHEqyHJGSkjbdGcx+aR2LOtcfz4U8votileVKgrQmOrqLNJhcSQP0x7ExYM07sFykkFyWj/BJrKQF",
	"afEjz/NUxNwKJSefjZL4nYkXkHH8JCxkROv/Ncyio+j/Jht+E7fMTIiPYxPdjyK7ziE6irjWfB3d39+P",
	"ogRMrEWOPKKjSE0/Q2wZysCFFHLOklJExpESE3KmdEYiIb0fQILm6anWSj9JiS7ZiapPSsAHLANj+BxQ",
	"jAul0m9gTGTzJbbMlUpZwi1nM6WZXXDrrFqr8Hyi13z6pKYHTM2cZAZfubL8V9DmOEk0GPOOW/7VXd1m",
	"0S1bmjK7ADKooU+GCDBh6BMaW8im7LQNnir5IAs/5PQ0iFTS1yjhzOQQi5mIKx25TDawKbk+u1qPg07p",
	"HrN598pya54DNjaIlrZx56ma8pSdnF5c3fKcbIyyXS+UjhdcyFOZ5ErIZxC0zcIn8Q9g2SXYQkvGJSvl",
	"d6ECWK7VSkDiMP8LdzsFDIOS4phUWT1/FKx4DMKEU8egPjU8rObS8BhXMFiCM8aoFGOTHctIe3QX5Vrl",
<<<<<<< HEAD
=======
	"oK1wqdNhf2i8S7iFtxq4hQTfcdkrOoqEtK9fRrUCQlqYg8Y3UjVXuLR8YqwWco4PJM/A+yDXIobLQvqe",
>>>>>>> Revert date field to integer format
	"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",
<<<<<<< HEAD
=======
=======
	"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",
	"c+NZ8OnxfwEAAP//M5V5Kks8AAA=",
>>>>>>> Combine all tx details endpoint to a single events endpoint
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
>>>>>>> Revert date field to integer format
}
