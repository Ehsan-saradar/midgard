// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+ZuTNycBCmL53bQs+LT4XwAAAP//GHowkYJEAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

