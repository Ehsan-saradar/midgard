// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"date,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"coins,omitempty"`
		Gas *struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"Coins,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"stakeUnitsAdded,omitempty"`
	} `json:"stake,omitempty"`
	Status   *string `json:"status,omitempty"`
	Type     *string `json:"type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"stakeUnitsSubtracted,omitempty"`
		WithdrawBasisPoints  *int64   `json:"withdrawBasisPoints,omitempty"`
	} `json:"withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"stakeArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *int64   `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"Coin,omitempty"`
		Memo        *string `json:"memo,omitempty"`
		PriceTarget *int64  `json:"priceTarget,omitempty"`
		TxID        *string `json:"txID,omitempty"`
	} `json:"from,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	To     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Date *time.Time `json:"date,omitempty"`
		Fee  *int       `json:"fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Height *int64   `json:"height,omitempty"`
		Memo   *string  `json:"memo,omitempty"`
		Slip   *float64 `json:"slip,omitempty"`
		TxID   *string  `json:"txID,omitempty"`
	} `json:"to,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

