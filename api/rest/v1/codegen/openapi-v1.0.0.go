// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Statue           *string  `json:"statue,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"date,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"coins,omitempty"`
		Gas *struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"Coins,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"stakeUnitsAdded,omitempty"`
	} `json:"stake,omitempty"`
	Status   *string `json:"status,omitempty"`
	Type     *string `json:"type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"stakeUnitsSubtracted,omitempty"`
		WithdrawBasisPoints  *int64   `json:"withdrawBasisPoints,omitempty"`
	} `json:"withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"stakeArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *int64   `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"Coin,omitempty"`
		Memo        *string `json:"memo,omitempty"`
		PriceTarget *int64  `json:"priceTarget,omitempty"`
		TxID        *string `json:"txID,omitempty"`
	} `json:"from,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	To     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Date *time.Time `json:"date,omitempty"`
		Fee  *int       `json:"fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Height *int64   `json:"height,omitempty"`
		Memo   *string  `json:"memo,omitempty"`
		Slip   *float64 `json:"slip,omitempty"`
		TxID   *string  `json:"txID,omitempty"`
	} `json:"to,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ODBBYPVeORZ8efhXAAAA//+8jKD7kEIAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

