// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *Tx     `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

