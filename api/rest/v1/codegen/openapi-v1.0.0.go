// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Statue           *string  `json:"statue,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"date,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"coins,omitempty"`
		Gas *struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"Coins,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"stakeUnitsAdded,omitempty"`
	} `json:"stake,omitempty"`
	Status   *string `json:"status,omitempty"`
	Type     *string `json:"type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"stakeUnitsSubtracted,omitempty"`
		WithdrawBasisPoints  *int64   `json:"withdrawBasisPoints,omitempty"`
	} `json:"withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"stakeArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *int64   `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"Coin,omitempty"`
		Memo        *string `json:"memo,omitempty"`
		PriceTarget *int64  `json:"priceTarget,omitempty"`
		TxID        *string `json:"txID,omitempty"`
	} `json:"from,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	To     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Date *time.Time `json:"date,omitempty"`
		Fee  *int       `json:"fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Height *int64   `json:"height,omitempty"`
		Memo   *string  `json:"memo,omitempty"`
		Slip   *float64 `json:"slip,omitempty"`
		TxID   *string  `json:"txID,omitempty"`
	} `json:"to,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

