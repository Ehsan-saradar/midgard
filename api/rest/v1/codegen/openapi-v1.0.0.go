// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"date,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"coins,omitempty"`
		Gas *struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"amount,omitempty"`
			Asset  *Asset `json:"asset,omitempty"`
		} `json:"Coins,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"stakeUnitsAdded,omitempty"`
	} `json:"stake,omitempty"`
	Status   *string `json:"status,omitempty"`
	Type     *string `json:"type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"stakeUnitsSubtracted,omitempty"`
		WithdrawBasisPoints  *int64   `json:"withdrawBasisPoints,omitempty"`
	} `json:"withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"stakeArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *int64   `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"Coin,omitempty"`
		Memo        *string `json:"memo,omitempty"`
		PriceTarget *int64  `json:"priceTarget,omitempty"`
		TxID        *string `json:"txID,omitempty"`
	} `json:"from,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	To     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Date *time.Time `json:"date,omitempty"`
		Fee  *int       `json:"fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"gas,omitempty"`
		Height *int64   `json:"height,omitempty"`
		Memo   *string  `json:"memo,omitempty"`
		Slip   *float64 `json:"slip,omitempty"`
		TxID   *string  `json:"txID,omitempty"`
	} `json:"to,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

