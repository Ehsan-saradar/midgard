// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"Date,omitempty"`
	Height  *int64     `json:"Height,omitempty"`
	Pool    *Asset     `json:"Pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		GAS *struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"GAS,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"StakeUnitsAdded,omitempty"`
	} `json:"Stake,omitempty"`
	Status   *string `json:"Status,omitempty"`
	Type     *string `json:"Type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"Asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"StakeUnitsSubtracted,omitempty"`
		WithdrawBP           *int64   `json:"WithdrawBP,omitempty"`
	} `json:"Withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		MEMO        *string `json:"MEMO,omitempty"`
		PriceTarget *int64  `json:"PriceTarget,omitempty"`
		TxID        *string `json:"TxID,omitempty"`
	} `json:"From,omitempty"`
	Pool   *Asset  `json:"Pool,omitempty"`
	Status *string `json:"Status,omitempty"`
	To     *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		Date *time.Time `json:"Date,omitempty"`
		Fee  *int       `json:"Fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Gas,omitempty"`
		Height *int64   `json:"Height,omitempty"`
		MEMO   *string  `json:"MEMO,omitempty"`
		Slip   *float64 `json:"Slip,omitempty"`
		TxID   *string  `json:"TxID,omitempty"`
	} `json:"To,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

