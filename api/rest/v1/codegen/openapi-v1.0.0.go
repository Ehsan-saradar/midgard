// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *time.Time `json:"date,omitempty"`
	Events  *Event     `json:"events,omitempty"`
	Gas     *Gas       `json:"gas,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	In      *Tx        `json:"in,omitempty"`
	Options *Option    `json:"options,omitempty"`
	Out     *Tx        `json:"out,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Status  *string    `json:"status,omitempty"`
	Type    *string    `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

