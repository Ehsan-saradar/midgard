// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Statue           *string  `json:"statue,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date   *time.Time `json:"date,omitempty"`
	Events *struct {
		Fee        *int64   `json:"fee,omitempty"`
		Slip       *float64 `json:"slip,omitempty"`
		StakeUnits *int64   `json:"stakeUnits,omitempty"`
	} `json:"events,omitempty"`
	Gas *struct {
		Amount *string `json:"amount,omitempty"`
		Asset  *Asset  `json:"asset,omitempty"`
	} `json:"gas,omitempty"`
	Height *int64 `json:"height,omitempty"`
	In     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"in,omitempty"`
	Options *struct {
		Stake    *string `json:"Stake,omitempty"`
		Swap     *string `json:"Swap,omitempty"`
		Withdraw *string `json:"Withdraw,omitempty"`
	} `json:"options,omitempty"`
	Out *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"out,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

