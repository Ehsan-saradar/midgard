// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xSPW/cMAz9KwKXLq7tS4YGmvqRDunQBnW24AZGYmwVZ0oQ5QuKg/97QefQxuklyCSB",
	"4nt8j3oHcHFMkYmLgD3MFQS+j2C1zgVd0SuNGHZgwdNePpYhZjdg4DrmHuYKPInLIZUQGSx80af3HeV9",
	"cGSup7tdcObT9RVUUELZ0este8ryyLOp27pV+piIMQWwcL6UKkhYBhULzX7T+Oj02tOiNCbKqEquPFgt",
	"XkYnUEEmSZGFFthZ2+qx1i0P2PeUm+M4c163RhI50xMrJ3njlWueK5BpHDH/Bgs3QxBzCrpCTSNxWWTp",
	"FrAXsLdwuapvlVf9HMnqX6KyXjbWPfa9ydswjcgG2ZsR3RCYTCb0eLej/7Sr5XAf3DLLEPsUA5dnrr91",
	"P76blxZ2Av3PdPe0QU0rL2X9drC3B5iy5mwoJdmm2Zx90B+vN/aivdAsPH2XEw3bv4Oeb+AYss+U5AGT",
	"WSXwnZifX7ubYwIZx1czOm/nPwEAAP//5Se2+zQDAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
