// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	Name        *string `json:"name,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

