// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	Name        *string `json:"name,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// EventDetails defines model for EventDetails.
type EventDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// EventsResponse defines model for EventsResponse.
type EventsResponse []EventDetails

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get events by address, asset or tx-id// (GET /v1/events)
	GetEvents(ctx echo.Context, params GetEventsParams) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/events", wrapper.GetEvents)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/5X+pSw+PAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

