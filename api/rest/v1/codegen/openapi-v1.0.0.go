// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	Name        *string `json:"name,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// Requested type of events
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
