// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// GetStakerTxParams defines parameters for GetStakerTx.
type GetStakerTxParams struct {
	Staker string  `json:"staker"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Asset  *string `json:"asset,omitempty"`
}

// GetSwapTxParams defines parameters for GetSwapTx.
type GetSwapTxParams struct {
	Asset  string `json:"asset"`
	Sender string `json:"sender"`
	Dest   string `json:"dest"`
	Limit  *int   `json:"limit,omitempty"`
	Offset *int   `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakerTx)
	GetStakerTx(ctx echo.Context, params GetStakerTxParams) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx)
	GetSwapTx(ctx echo.Context, params GetSwapTxParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakerTxParams
	// ------------- Required query parameter "staker" -------------
	if paramValue := ctx.QueryParam("staker"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument staker is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "staker", ctx.QueryParams(), &params.Staker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter staker: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTx(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapTxParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument sender is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Required query parameter "dest" -------------
	if paramValue := ctx.QueryParam("dest"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument dest is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "dest", ctx.QueryParams(), &params.Dest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dest: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTx(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakerTx", wrapper.GetStakerTx)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx", wrapper.GetSwapTx)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX3PjthH/Khi2ndiJTMm+NM34qfbZubrTs28s+/KQ3gMkriTkSIAHgPapN/7unV2A",
	"IiWSEmjZzUufRBHg/nYX+w8LfIumKsuVBGlNdPot0mByJQ3QnzNjwJoLsFykkNz6IRyZKmlBWnzkeZ6K",
	"KbdCyeHvRkl8Z6YLyDg+/VnDLDqN/jSsYIZu1AyJvKMePT09DaIEzFSLHElFp1GJy2geE3KmdEY40dPA",
	"8/YsnoSFzAQxh0B2mUN0GnGt+bKNTcfdmRseROeXH8aPPH9xZXm6F9zyNi5uwRZaGsYlU5PfYWoZonIh",
	"hZyzeaomPGWeBEuIxiB6BxI0Ty+1VvrF+SWqbZzSAMvAGD4HZOODUunrGRlS77axrWrjacrsAliuVEpK",
	"YzOlmV1wyzgueozcjy3/DNqcJYkGY3B5XlyEJkSrHaIFdrFv6MkQISYMPQk5X5OAvPE1+S8Bei8E8d22",
	"AtVfJ1pdntcLDR4gKDh0LYopaTwNPHwVcfEh1yoHbYULxNMFF8SpxzNWCzlHBswym6i0dciK6WfQLUMV",
	"307Vq3Dq/aQBv+IqKGBecAtvNXALCX7jonZ0GiXcQjRo8vkvNVetAlzzDFoHci2mcFtIWKeviklaQ5BF",
	"NgG9mn8/vgia3qadevBtaOfi7B5/NpIXF+mSnU2teAB2b0AbdlBI8aUANpETxp0vg2FCWtB8aoWcH0aD",
	"ij0h7U8/VtzhtLmThkjffe3CtJpLgwSVNOwAwezXQMrv2yR5r6RdbMgSSM592cZqSXQPZjGwv1WF8+p1",
	"6te0lEzNGHdMUwgMI3unLE/Jls+LpWnSpnE2KZbozXuwX+GMIU07gQyk6UsgXUBuF10g6ErsnKdcTqGP",
	"mi65ls7J26gCjbIDIdnt/fUl+8jTAg7jHvQp0HbSpxC6F/02y3S091W385IO4vcuDmBEyTEw/LsYjU5+",
	"YmVaCUf5qNLChcg2mA3FkDukqUuchhlCT5gRckrpSNu4N/TJjwu9H7yQDIkESm1XVtG9dL602WcJCeZX",
	"YReJ5o/dSI9+xl5obenG1c6NRAPl62Y+1/ClEBp95Tc/7VML3VotvGeO9+XClpjyttAapPWbNx9cwtRP",
	"n9zeXDVJO2KuVmRKMiEfwNgMS7tBSCHg4i3FDeKyi3mH48NPEM/nxZI+2pmRyCeO0OXfwNl4fHkXBwP8",
	"AnD2ABq3TU3NuAE2A2BG/AeoMm5AkVPS42EfVLNVWTjBEUYFHIbLM05FvlMgq3kCOLNVIowffwkGvPsa",
	"Alf6cbcen6PG7bH6gUZfBsx5eatrYqKnIfY9Owmntsvw5qg5nIjm14vsbssKJ9caMYgrHAmKD57M8Uk3",
	"IVqj4xOWYQVrwskGGTuB4MxwqbdGMyrsKP+W1ZKbGEw9wGOI55rbhBO/l8J2Fkl5OYGpwhrLZUL9imDi",
	"nf72qI4e+bL0OCGxKjmyIoMB/qFdZU+QjiqoAUSFTl8U3Lq2WCO+xnTiMtWBp7kefLsNchUHdmXv+s4g",
	"jGH84lVyNxIOSN3EcZ/MjduvsNRNQdiHZozS4fR7Z+5NqHhVTofmVw8bmLqbxrOd8jNS96ZIPVI3Ij43",
	"dxNsDXWlx3Do4NTdiRWqWbez2WmIbVucPhDa7ITwvSo/vQdxIeeBEoBhP6z2UMx+DcTwu+ZQCUy5y641",
	"2giVMkwPzEDB/NT1DaGQq058zA4mxRJFN5CmJtAMq83oTg5+7afRtv1n2YlooPgDBN+9bGvmtpxVNLaa",
	"NMcdmO15GhfUh3qg+kfNqCEl5JyWg/yTT7UyhtoS1CHs0wBpz3E+ElGjw1PFotG8RNcrX1V77Hmcb1nq",
	"6mzmJRoDXevxsVwJ3wTyHcKZVlnNP0Tsq1Uq/4ZVIfg9O+CrvgM78lRqNcHhvv0FXnE/5FWvoHdzocUy",
	"MvRblP1OfQZpfD0eh7b8LfwitKmRXztWofq1zR2xSH2md7iF0IUER4D94NVv/P/v3QJQKXq45zbtQLuy",
	"kf3giN7eXB0OT3rsrjrU3tgAxeFV7E4rphjSasN7lsoV+lCvqt6+VfI2GyTOeylkvHLIFnYh12AwHjD1",
	"KEGbhcjJy8OV0QxN+ErImSqPb/mUghBk1L2MEngwf7cLpeloNFaazH2dr7c4dDQG/YCbpQ/FJBVTdvbh",
	"CvGFTWH7lAfQxtE5jkfx6Ehx8wYxVA6S5yI6jd7g+2gQ5dwuSC3Dh2MXNujfHGybrlbn3LzrbLhskRd5",
	"rrR1S4QRmQ6tr5LoNHoH1t1/iQbrN3ZORqOuUL2aN9y4OvM0iH4M+az1usgTLVQl+PAb/T51KsD1n+u3",
	"eRifqMIyzsY5TMVs6eTvlPkKjQKVrnkGlsqU375F8JVneeqUwMuMZYos43qJsa5UK3OwrgJEZZP9sIPz",
	"6/PDcswqNoG5kDQJLQEdPjqNzq/P47ub9zfnR8eXx+uH7+tI7n0dCgWs0Lw7VJRrVMnsMdtzwpZ0Bh6V",
	"Kqn6/FYXMKjdXNg8E/j0fMto3MV5IQuZQI7lcc00GitcP2h/jgCbt68q8ERNtwFfqGmXM22UwI98Pgc9",
	"9GGAvYlHzOQwZXMS3kLCEqRFFztqViHozKvx6dpXRQbSct9Es3yOph1drL3/VMqzAJ66/k2XSP9wM0KE",
	"egeWuenMTfbNpQ9XNQ1SobnTv/e8UdXi9e5+mLOIDa9fh96MH/+PCS8RE9qv51Vm4faE7pS0yxTH5Zxd",
	"K7i5vySxvxSgl5XcDrCX4INNoFRkwqKtF6k1TJPNog/CjBepZSd/7cCm79agZzw1bdi10mYTXM1maHVx",
	"HK8ArWKjDkg3e1/MTd9oQ2oaVBfQLotqRhe/svUW3QX5P9bN63HGVN2HZ5dQjsZ3prpo1RZZ/Ob32dlm",
	"86ZhQ4bhN4//tJc0W29wdstVb8LscDzT6ngb8WY1+MoRZ8uV2i0a3i8zeXL1pFRmBzWr39is6WiH3s9k",
	"UrVV/iD9h8WBPySvdF47rq2xK5ji8p5uZ3px84JKnUWRoavJhGV8uhASmAae8EkKjfrMkK78ZWEGMsmV",
	"kHajsvvn+OaadRWFLV9Xhd24PqEq7LBE3pFN3YwdJtUv0vc2JAMy2Z2qadJ+QAkYuwMGp7xGPRCzi/9J",
	"QXBDKb5Ce+lqIDxLP/J8R45G4wf9UNpcoVN0Kmvz0+Hw+ORv8SgexcenP49+HkUoaDVuWiZ8WnlD44Db",
	"tWLW+jPfGXZ7Ob7z/RmvkM4OztOnp/8GAAD//+c6Z43dNAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
