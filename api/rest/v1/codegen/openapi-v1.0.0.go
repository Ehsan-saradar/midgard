// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time `json:"Date,omitempty"`
	Height  *int64     `json:"Height,omitempty"`
	Pool    *Asset     `json:"Pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		GAS *struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"GAS,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"StakeUnitsAdded,omitempty"`
	} `json:"Stake,omitempty"`
	Status   *string `json:"Status,omitempty"`
	Type     *string `json:"Type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"Asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"StakeUnitsSubtracted,omitempty"`
		WithdrawBP           *int64   `json:"WithdrawBP,omitempty"`
	} `json:"Withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// SwapTxData defines model for SwapTxData.
type SwapTxData struct {
	From *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		MEMO        *string `json:"MEMO,omitempty"`
		PriceTarget *int64  `json:"PriceTarget,omitempty"`
		TxID        *string `json:"TxID,omitempty"`
	} `json:"From,omitempty"`
	Pool   *Asset  `json:"Pool,omitempty"`
	Status *string `json:"Status,omitempty"`
	To     *struct {
		Address *string `json:"Address,omitempty"`
		Coin    *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		Date *time.Time `json:"Date,omitempty"`
		Fee  *int       `json:"Fee,omitempty"`
		Gas  *struct {
			Amount *string `json:"Amount,omitempty"`
			Asset  *Asset  `json:"Asset,omitempty"`
		} `json:"Gas,omitempty"`
		Height *int64   `json:"Height,omitempty"`
		MEMO   *string  `json:"MEMO,omitempty"`
		Slip   *float64 `json:"Slip,omitempty"`
		TxID   *string  `json:"TxID,omitempty"`
	} `json:"To,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// SwapTxDataResponse defines model for SwapTxDataResponse.
type SwapTxDataResponse []SwapTxData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Assets// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Staking Transactions// (GET /v1/stakeTx/{address})
	GetStakerTxForAddress(ctx echo.Context, address string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get Swapping Transactions// (GET /v1/swapTx/{address})
	GetSwapTxForAddress(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTxForAddress(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTxForAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTxForAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTxForAddress(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTxForAddress)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx/:address", wrapper.GetSwapTxForAddress)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

