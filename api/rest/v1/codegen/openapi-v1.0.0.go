// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nx7/EwAA//+hpZp25EMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

