// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xSsW7cMAz9FYFLF9f2JUMDTS2aJR3aAJctuIGRGEuFRQmS7CI4+N8LOkEbp5dDJwkU",
	"3+N71DuCiSFFJq4F9HFpwPNjBC11rmiqXCmgH0GDpbl8ri5m49BzG/MASwOWisk+VR8ZNHyVp497yrM3",
	"pG6nh9Eb9eX2Bhqovo50vmWmXJ55dm3f9kIfEzEmDxou11IDCasTsdDNu85GI9eBVqUxUUZRcmNBS/E6",
	"mgINZCopcqEVdtH3cmx1l184DJS7l3Hqsu1VSWTUQCycZJUVrmVpoEwhYH4CDXfOF3UKukFNgbiusmQL",
	"OBTQ93C9qR+EV/y8kLU/i8h639j+ue+/vLkpICtkqwIa55lUJrT4MNI/2sWyf/RmnaWIbYqe6xvX3/Y/",
	"vqv3FnYC/df0/nWDmBZeyvLtoO+PMGXJmas16a7bXXySH293+qq/kiy8fi8nGg5/Br3dwJ0jFXDwBsfx",
	"SW0C+KFsI8gYzoZ0OSy/AwAA//9KkyXDNQMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

