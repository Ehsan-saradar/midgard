// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *Tx     `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse struct {
	AdditionalProperties map[string][]ThorchainEndpoint `json:"-"`
}

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// Getter for additional properties for ThorchainEndpointsResponse. Returns the specified
// element and whether it was found
func (a ThorchainEndpointsResponse) Get(fieldName string) (value []ThorchainEndpoint, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ThorchainEndpointsResponse
func (a *ThorchainEndpointsResponse) Set(fieldName string, value []ThorchainEndpoint) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]ThorchainEndpoint)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ThorchainEndpointsResponse to handle AdditionalProperties
func (a *ThorchainEndpointsResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]ThorchainEndpoint)
		for fieldName, fieldBuf := range object {
			var fieldVal []ThorchainEndpoint
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ThorchainEndpointsResponse to handle AdditionalProperties
func (a ThorchainEndpointsResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//wiuCjyBQwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

