// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	Logo        *string `json:"logo,omitempty"`
	Name        *string `json:"name,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// EventDetails defines model for EventDetails.
type EventDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset  `json:"asset,omitempty"`
	AssetEarned     *string `json:"assetEarned,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	DateFirstStaked *int64  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string `json:"poolEarned,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolStaked      *string `json:"poolStaked,omitempty"`
	RuneEarned      *string `json:"runeEarned,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	StakeUnits      *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// EventsResponse defines model for EventsResponse.
type EventsResponse struct {
	Count  *int64          `json:"count,omitempty"`
	Events *[]EventDetails `json:"events,omitempty"`
}

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get events by address, asset or tx-id// (GET /v1/events)
	GetEvents(ctx echo.Context, params GetEventsParams) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/events", wrapper.GetEvents)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z41nwafn/wUAAP//+uWpl5Q8AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

