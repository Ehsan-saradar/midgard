// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
	PriceUSD    *float64 `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *Tx     `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

