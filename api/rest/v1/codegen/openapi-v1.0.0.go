// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *string  `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *string  `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *string  `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string  `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string  `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string  `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string  `json:"buyTxAverage,omitempty"`
	BuyVolume        *string  `json:"buyVolume,omitempty"`
	PoolDepth        *string  `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string  `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string  `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string  `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string  `json:"poolTxAverage,omitempty"`
	PoolUnits        *string  `json:"poolUnits,omitempty"`
	PoolVolume       *string  `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string  `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *string  `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *string  `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string  `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string  `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string  `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string  `json:"sellTxAverage,omitempty"`
	SellVolume       *string  `json:"sellVolume,omitempty"`
	StakeTxCount     *string  `json:"stakeTxCount,omitempty"`
	StakersCount     *string  `json:"stakersCount,omitempty"`
	StakingTxCount   *string  `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *string  `json:"swappersCount,omitempty"`
	SwappingTxCount  *string  `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string  `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *string  `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *string  `json:"assetStaked,omitempty"`
	DateFirstStaked *string  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string  `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *string  `json:"poolStaked,omitempty"`
	RuneEarned      *string  `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *string  `json:"runeStaked,omitempty"`
	StakeUnits      *string  `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *string `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string  `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *string  `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *string  `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *float64 `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DyM0xPq5CSz4/PCvAAAA//8JDwUqKT8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

