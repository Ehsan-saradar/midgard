// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *string `json:"Date,omitempty"`
	Height  *int64  `json:"Height,omitempty"`
	Pool    *Asset  `json:"Pool,omitempty"`
	Receive *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		GAS *struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"GAS,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Receive,omitempty"`
	Send *struct {
		Coins *[]struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coins,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Send,omitempty"`
	Stake *struct {
		StakeUnitsAdded *int64 `json:"StakeUnitsAdded,omitempty"`
	} `json:"Stake,omitempty"`
	Status   *string `json:"Status,omitempty"`
	Type     *string `json:"Type,omitempty"`
	Withdraw *struct {
		Asymmetry            *float64 `json:"Asymmetry,omitempty"`
		StakeUnitsSubtracted *int64   `json:"StakeUnitsSubtracted,omitempty"`
		WithdrawBP           *int64   `json:"WithdrawBP,omitempty"`
	} `json:"Withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// GetSwapTxParams defines parameters for GetSwapTx.
type GetSwapTxParams struct {
	Asset  string `json:"asset"`
	Sender string `json:"sender"`
	Dest   string `json:"dest"`
	Limit  *int   `json:"limit,omitempty"`
	Offset *int   `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakeTx/{address})
	GetStakerTx(ctx echo.Context, address string) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx)
	GetSwapTx(ctx echo.Context, params GetSwapTxParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTx(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTx(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapTxParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument sender is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Required query parameter "dest" -------------
	if paramValue := ctx.QueryParam("dest"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument dest is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "dest", ctx.QueryParams(), &params.Dest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dest: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTx(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTx)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx", wrapper.GetSwapTx)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
