// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *string  `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *string  `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *string  `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string  `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string  `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string  `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string  `json:"buyTxAverage,omitempty"`
	BuyVolume        *string  `json:"buyVolume,omitempty"`
	PoolDepth        *string  `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string  `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string  `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string  `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string  `json:"poolTxAverage,omitempty"`
	PoolUnits        *string  `json:"poolUnits,omitempty"`
	PoolVolume       *string  `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string  `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *string  `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *string  `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string  `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string  `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string  `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string  `json:"sellTxAverage,omitempty"`
	SellVolume       *string  `json:"sellVolume,omitempty"`
	StakeTxCount     *string  `json:"stakeTxCount,omitempty"`
	StakersCount     *string  `json:"stakersCount,omitempty"`
	StakingTxCount   *string  `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *string  `json:"swappersCount,omitempty"`
	SwappingTxCount  *string  `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string  `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *string  `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *string  `json:"assetStaked,omitempty"`
	DateFirstStaked *string  `json:"dateFirstStaked,omitempty"`
	PoolEarned      *string  `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *string  `json:"poolStaked,omitempty"`
	RuneEarned      *string  `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *string  `json:"runeStaked,omitempty"`
	StakeUnits      *string  `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *string `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string  `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *string  `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *string  `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *float64 `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {
	Asset string `json:"asset"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//k/iSJCpAAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

