// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"asset,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Logo        *string    `json:"logo,omitempty"`
	Name        *string    `json:"name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Statue           *string  `json:"statue,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"asset,omitempty"`
	AssetEarned     *int64     `json:"assetEarned,omitempty"`
	AssetROI        *float64   `json:"assetROI,omitempty"`
	AssetStaked     *int64     `json:"assetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"poolEarned,omitempty"`
	PoolROI         *float64   `json:"poolROI,omitempty"`
	PoolStaked      *int64     `json:"poolStaked,omitempty"`
	RuneEarned      *int64     `json:"runeEarned,omitempty"`
	RuneROI         *float64   `json:"runeROI,omitempty"`
	RuneStaked      *int64     `json:"runeStaked,omitempty"`
	StakeUnits      *int64     `json:"stakeUnits,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date   *time.Time `json:"date,omitempty"`
	Events *struct {
		Fee        *int64   `json:"fee,omitempty"`
		Slip       *float64 `json:"slip,omitempty"`
		StakeUnits *int64   `json:"stakeUnits,omitempty"`
	} `json:"events,omitempty"`
	Gas *struct {
		Amount *string `json:"amount,omitempty"`
		Asset  *Asset  `json:"asset,omitempty"`
	} `json:"gas,omitempty"`
	Height *int64 `json:"height,omitempty"`
	In     *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"in,omitempty"`
	Options *struct {
		Stake    *string `json:"Stake,omitempty"`
		Swap     *string `json:"Swap,omitempty"`
		Withdraw *string `json:"Withdraw,omitempty"`
	} `json:"options,omitempty"`
	Out *struct {
		Address *string `json:"address,omitempty"`
		Coin    *struct {
			Amount *string `json:"amount,omitempty"`
			Asset  *Asset  `json:"asset,omitempty"`
		} `json:"coin,omitempty"`
		Memo *string `json:"memo,omitempty"`
		TxID *string `json:"txID,omitempty"`
	} `json:"out,omitempty"`
	Pool   *Asset  `json:"pool,omitempty"`
	Status *string `json:"status,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get BEPSwap Data// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

