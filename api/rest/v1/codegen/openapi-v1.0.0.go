// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
	PriceUSD    *float64 `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *time.Time `json:"date,omitempty"`
	Events  *Event     `json:"events,omitempty"`
	Gas     *Gas       `json:"gas,omitempty"`
	Height  *int64     `json:"height,omitempty"`
	In      *Tx        `json:"in,omitempty"`
	Options *Option    `json:"options,omitempty"`
	Out     *Tx        `json:"out,omitempty"`
	Pool    *Asset     `json:"pool,omitempty"`
	Status  *string    `json:"status,omitempty"`
	Type    *string    `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

