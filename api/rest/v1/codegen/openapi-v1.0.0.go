// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// StakeTxData defines model for StakeTxData.
type StakeTxData struct {
	Date    *time.Time              `json:"Date,omitempty"`
	Height  *int64                  `json:"Height,omitempty"`
	Pool    *Asset                  `json:"Pool,omitempty"`
	Receive *map[string]interface{} `json:"Receive,omitempty"`
	Send    *struct {
		Coin *struct {
			Amount *int64 `json:"Amount,omitempty"`
			Asset  *Asset `json:"Asset,omitempty"`
		} `json:"Coin,omitempty"`
		MEMO *string `json:"MEMO,omitempty"`
		TxID *string `json:"TxID,omitempty"`
	} `json:"Send,omitempty"`
	Stake    *map[string]interface{} `json:"Stake,omitempty"`
	Status   *string                 `json:"Status,omitempty"`
	Type     *string                 `json:"Type,omitempty"`
	Withdraw *map[string]interface{} `json:"Withdraw,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakeTxDataResponse defines model for StakeTxDataResponse.
type StakeTxDataResponse []StakeTxData

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// GetSwapTxParams defines parameters for GetSwapTx.
type GetSwapTxParams struct {
	Asset  string `json:"asset"`
	Sender string `json:"sender"`
	Dest   string `json:"dest"`
	Limit  *int   `json:"limit,omitempty"`
	Offset *int   `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakeTx/{address})
	GetStakerTx(ctx echo.Context, address string) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx)
	GetSwapTx(ctx echo.Context, params GetSwapTxParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTx(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTx(ctx, address)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapTxParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument sender is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Required query parameter "dest" -------------
	if paramValue := ctx.QueryParam("dest"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument dest is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "dest", ctx.QueryParams(), &params.Dest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dest: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTx(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakeTx/:address", wrapper.GetStakerTx)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx", wrapper.GetSwapTx)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
