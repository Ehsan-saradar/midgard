// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset     `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int64 `json:"DAU,omitempty"`
	DailyTx         *int64 `json:"DailyTx,omitempty"`
	MAU             *int64 `json:"MAU,omitempty"`
	MonthlyTx       *int64 `json:"MonthlyTx,omitempty"`
	PoolCount       *int64 `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int64 `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int64 `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int64 `json:"TotalDepth,omitempty"`
	TotalEarned     *int64 `json:"TotalEarned,omitempty"`
	TotalStaked     *int64 `json:"TotalStaked,omitempty"`
	TotalTx         *int64 `json:"TotalTx,omitempty"`
	TotalUsers      *int64 `json:"TotalUsers,omitempty"`
	TotalVolume     *int64 `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int64 `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int64 `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int64 `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"Asset,omitempty"`
	AssetDepth       *int64   `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int64   `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int64   `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"BuyVolume,omitempty"`
	PoolDepth        *int64   `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int64   `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"PoolUnits,omitempty"`
	PoolVolume       *int64   `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int64   `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int64   `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int64   `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"SellTxAverage,omitempty"`
	SellVolume       *int64   `json:"SellVolume,omitempty"`
	StakeTxCount     *int64   `json:"StakeTxCount,omitempty"`
	StakersCount     *int64   `json:"StakersCount,omitempty"`
	StakingTxCount   *int64   `json:"StakingTxCount,omitempty"`
	SwappersCount    *int64   `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"WithdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	StakeArray  *[]Asset `json:"StakeArray,omitempty"`
	TotalEarned *int64   `json:"TotalEarned,omitempty"`
	TotalROI    *int64   `json:"TotalROI,omitempty"`
	TotalStaked *int64   `json:"TotalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset     `json:"Asset,omitempty"`
	AssetEarned     *int64     `json:"AssetEarned,omitempty"`
	AssetROI        *float64   `json:"AssetROI,omitempty"`
	AssetStaked     *int64     `json:"AssetStaked,omitempty"`
	DateFirstStaked *time.Time `json:"DateFirstStaked,omitempty"`
	PoolEarned      *int64     `json:"PoolEarned,omitempty"`
	PoolROI         *float64   `json:"PoolROI,omitempty"`
	PoolStaked      *int64     `json:"PoolStaked,omitempty"`
	RuneEarned      *int64     `json:"RuneEarned,omitempty"`
	RuneROI         *float64   `json:"RuneROI,omitempty"`
	RuneStaked      *int64     `json:"RuneStaked,omitempty"`
	StakeUnits      *int64     `json:"StakeUnits,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse []StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// GetStakerTxParams defines parameters for GetStakerTx.
type GetStakerTxParams struct {
	Staker string  `json:"staker"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Asset  *string `json:"asset,omitempty"`
}

// GetSwapTxParams defines parameters for GetSwapTx.
type GetSwapTxParams struct {
	Asset  string `json:"asset"`
	Sender string `json:"sender"`
	Dest   string `json:"dest"`
	Limit  *int   `json:"limit,omitempty"`
	Offset *int   `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakerTx)
	GetStakerTx(ctx echo.Context, params GetStakerTxParams) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx)
	GetSwapTx(ctx echo.Context, params GetSwapTxParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakerTxParams
	// ------------- Required query parameter "staker" -------------
	if paramValue := ctx.QueryParam("staker"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument staker is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "staker", ctx.QueryParams(), &params.Staker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter staker: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTx(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapTxParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument sender is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Required query parameter "dest" -------------
	if paramValue := ctx.QueryParam("dest"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument dest is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "dest", ctx.QueryParams(), &params.Dest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dest: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTx(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakerTx", wrapper.GetStakerTx)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx", wrapper.GetSwapTx)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
