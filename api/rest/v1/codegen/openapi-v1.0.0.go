// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
	"time"
)

// Asset defines model for Asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *string    `json:"Asset,omitempty"`
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	Logo        *string    `json:"Logo,omitempty"`
	Name        *string    `json:"Name,omitempty"`
	Ticker      *string    `json:"Ticker,omitempty"`
	PriceRune   *float64   `json:"priceRune,omitempty"`
	PriceUSD    *float64   `json:"priceUSD,omitempty"`
}

// BEPSwapData defines model for BEPSwapData.
type BEPSwapData struct {
	DAU             *int `json:"DAU,omitempty"`
	DailyTx         *int `json:"DailyTx,omitempty"`
	MAU             *int `json:"MAU,omitempty"`
	MonthlyTx       *int `json:"MonthlyTx,omitempty"`
	PoolCount       *int `json:"PoolCount,omitempty"`
	TotalAssetBuys  *int `json:"TotalAssetBuys,omitempty"`
	TotalAssetSells *int `json:"TotalAssetSells,omitempty"`
	TotalDepth      *int `json:"TotalDepth,omitempty"`
	TotalEarned     *int `json:"TotalEarned,omitempty"`
	TotalStaked     *int `json:"TotalStaked,omitempty"`
	TotalTx         *int `json:"TotalTx,omitempty"`
	TotalUsers      *int `json:"TotalUsers,omitempty"`
	TotalVolume     *int `json:"TotalVolume,omitempty"`
	TotalVolume24hr *int `json:"TotalVolume24hr,omitempty"`
	TotalStakeTx    *int `json:"totalStakeTx,omitempty"`
	TotalWithdrawTx *int `json:"totalWithdrawTx,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *string  `json:"Asset,omitempty"`
	AssetDepth       *int     `json:"AssetDepth,omitempty"`
	AssetROI         *float64 `json:"AssetROI,omitempty"`
	AssetStakedTotal *int     `json:"AssetStakedTotal,omitempty"`
	BuyAssetCount    *int     `json:"BuyAssetCount,omitempty"`
	BuyFeeAverage    *int     `json:"BuyFeeAverage,omitempty"`
	BuyFeesTotal     *int     `json:"BuyFeesTotal,omitempty"`
	BuySlipAverage   *int     `json:"BuySlipAverage,omitempty"`
	BuyTxAverage     *int     `json:"BuyTxAverage,omitempty"`
	BuyVolume        *int     `json:"BuyVolume,omitempty"`
	PoolDepth        *int     `json:"PoolDepth,omitempty"`
	PoolFeeAverage   *int     `json:"PoolFeeAverage,omitempty"`
	PoolFeesTotal    *int     `json:"PoolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"PoolROI,omitempty"`
	PoolROI12        *float64 `json:"PoolROI12,omitempty"`
	PoolSlipAverage  *int     `json:"PoolSlipAverage,omitempty"`
	PoolStakedTotal  *int     `json:"PoolStakedTotal,omitempty"`
	PoolTxAverage    *int     `json:"PoolTxAverage,omitempty"`
	PoolUnits        *int     `json:"PoolUnits,omitempty"`
	PoolVolume       *int     `json:"PoolVolume,omitempty"`
	PoolVolume24hr   *int     `json:"PoolVolume24hr,omitempty"`
	Price            *float64 `json:"Price,omitempty"`
	RuneDepth        *int     `json:"RuneDepth,omitempty"`
	RuneROI          *float64 `json:"RuneROI,omitempty"`
	RuneStakedTotal  *int     `json:"RuneStakedTotal,omitempty"`
	SellAssetCount   *int     `json:"SellAssetCount,omitempty"`
	SellFeeAverage   *int     `json:"SellFeeAverage,omitempty"`
	SellFeesTotal    *int     `json:"SellFeesTotal,omitempty"`
	SellSlipAverage  *int     `json:"SellSlipAverage,omitempty"`
	SellTxAverage    *int     `json:"SellTxAverage,omitempty"`
	SellVolume       *int     `json:"SellVolume,omitempty"`
	StakeTxCount     *int     `json:"StakeTxCount,omitempty"`
	StakersCount     *int     `json:"StakersCount,omitempty"`
	StakingTxCount   *int     `json:"StakingTxCount,omitempty"`
	SwappersCount    *int     `json:"SwappersCount,omitempty"`
	SwappingTxCount  *int     `json:"SwappingTxCount,omitempty"`
	WithdrawTxCount  *int     `json:"WithdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers struct {
	Address *string `json:"Address,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// AssetsResponse defines model for AssetsResponse.
type AssetsResponse []Asset

// BEPSwapResponse defines model for BEPSwapResponse.
type BEPSwapResponse BEPSwapData

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// GetAssetsParams defines parameters for GetAssets.
type GetAssetsParams struct {
	Asset *string `json:"asset,omitempty"`
}

// GetStakerTxParams defines parameters for GetStakerTx.
type GetStakerTxParams struct {
	Staker string  `json:"staker"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Asset  *string `json:"asset,omitempty"`
}

// GetSwapTxParams defines parameters for GetSwapTx.
type GetSwapTxParams struct {
	Asset  string `json:"asset"`
	Sender string `json:"sender"`
	Dest   string `json:"dest"`
	Limit  *int   `json:"limit,omitempty"`
	Offset *int   `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /v1/assets)
	GetAssets(ctx echo.Context, params GetAssetsParams) error
	// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// (GET /v1/bepswap)
	GetBEPSwapData(ctx echo.Context) error
	// This swagger/openapi 3.0 generated documentation// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// (GET /v1/graphql)
	GetGraphqlPlayground(ctx echo.Context) error
	// (POST /v1/graphql/query)
	PostGraphqlQuery(ctx echo.Context) error
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// (GET /v1/stakerTx)
	GetStakerTx(ctx echo.Context, params GetStakerTxParams) error
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// (GET /v1/stakers/{address}/)
	GetStakersAddressData(ctx echo.Context, address string) error
	// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// JSON swagger/openapi 3.0 specification endpoint// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// (GET /v1/swapTx)
	GetSwapTx(ctx echo.Context, params GetSwapTxParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetsParams
	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssets(ctx, params)
	return err
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetBEPSwapData converts echo context to params.
func (w *ServerInterfaceWrapper) GetBEPSwapData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBEPSwapData(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetGraphqlPlayground converts echo context to params.
func (w *ServerInterfaceWrapper) GetGraphqlPlayground(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGraphqlPlayground(ctx)
	return err
}

// PostGraphqlQuery converts echo context to params.
func (w *ServerInterfaceWrapper) PostGraphqlQuery(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGraphqlQuery(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakerTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakerTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakerTxParams
	// ------------- Required query parameter "staker" -------------
	if paramValue := ctx.QueryParam("staker"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument staker is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "staker", ctx.QueryParams(), &params.Staker)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter staker: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakerTx(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetSwapTx converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapTx(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapTxParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Required query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument sender is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Required query parameter "dest" -------------
	if paramValue := ctx.QueryParam("dest"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument dest is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "dest", ctx.QueryParams(), &params.Dest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dest: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapTx(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssets)
	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/bepswap", wrapper.GetBEPSwapData)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/graphql", wrapper.GetGraphqlPlayground)
	router.POST("/v1/graphql/query", wrapper.PostGraphqlQuery)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakerTx", wrapper.GetStakerTx)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address/", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/swapTx", wrapper.GetSwapTx)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"efFVGiR4Nba+X/83AAD//+8mSoXAKwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
