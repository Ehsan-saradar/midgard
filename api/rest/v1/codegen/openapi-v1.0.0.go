// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset   `json:"asset,omitempty"`
	DateCreated *int64   `json:"dateCreated,omitempty"`
	Logo        *string  `json:"logo,omitempty"`
	Name        *string  `json:"name,omitempty"`
	PriceRune   *float64 `json:"priceRune,omitempty"`
	PriceUSD    *float64 `json:"priceUSD,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset   `json:"asset,omitempty"`
	AssetDepth       *int64   `json:"assetDepth,omitempty"`
	AssetROI         *float64 `json:"assetROI,omitempty"`
	AssetStakedTotal *int64   `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *int64   `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *int64   `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *int64   `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *float64 `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *int64   `json:"buyTxAverage,omitempty"`
	BuyVolume        *int64   `json:"buyVolume,omitempty"`
	PoolDepth        *int64   `json:"poolDepth,omitempty"`
	PoolFeeAverage   *int64   `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *int64   `json:"poolFeesTotal,omitempty"`
	PoolROI          *float64 `json:"poolROI,omitempty"`
	PoolROI12        *float64 `json:"poolROI12,omitempty"`
	PoolSlipAverage  *float64 `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *int64   `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *int64   `json:"poolTxAverage,omitempty"`
	PoolUnits        *int64   `json:"poolUnits,omitempty"`
	PoolVolume       *int64   `json:"poolVolume,omitempty"`
	PoolVolume24hr   *int64   `json:"poolVolume24hr,omitempty"`
	Price            *float64 `json:"price,omitempty"`
	RuneDepth        *int64   `json:"runeDepth,omitempty"`
	RuneROI          *float64 `json:"runeROI,omitempty"`
	RuneStakedTotal  *int64   `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *int64   `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *int64   `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *int64   `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *float64 `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *int64   `json:"sellTxAverage,omitempty"`
	SellVolume       *int64   `json:"sellVolume,omitempty"`
	StakeTxCount     *int64   `json:"stakeTxCount,omitempty"`
	StakersCount     *int64   `json:"stakersCount,omitempty"`
	StakingTxCount   *int64   `json:"stakingTxCount,omitempty"`
	Status           *string  `json:"status,omitempty"`
	SwappersCount    *int64   `json:"swappersCount,omitempty"`
	SwappingTxCount  *int64   `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *int64   `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *int64   `json:"totalEarned,omitempty"`
	TotalROI    *float64 `json:"totalROI,omitempty"`
	TotalStaked *int64   `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset           *Asset   `json:"asset,omitempty"`
	AssetEarned     *int64   `json:"assetEarned,omitempty"`
	AssetROI        *float64 `json:"assetROI,omitempty"`
	AssetStaked     *int64   `json:"assetStaked,omitempty"`
	DateFirstStaked *int64   `json:"dateFirstStaked,omitempty"`
	PoolEarned      *int64   `json:"poolEarned,omitempty"`
	PoolROI         *float64 `json:"poolROI,omitempty"`
	PoolStaked      *int64   `json:"poolStaked,omitempty"`
	RuneEarned      *int64   `json:"runeEarned,omitempty"`
	RuneROI         *float64 `json:"runeROI,omitempty"`
	RuneStaked      *int64   `json:"runeStaked,omitempty"`
	StakeUnits      *int64   `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *int64 `json:"dailyActiveUsers,omitempty"`
	DailyTx            *int64 `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *int64 `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *int64 `json:"monthlyTx,omitempty"`
	PoolCount          *int64 `json:"poolCount,omitempty"`
	TotalAssetBuys     *int64 `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *int64 `json:"totalAssetSells,omitempty"`
	TotalDepth         *int64 `json:"totalDepth,omitempty"`
	TotalEarned        *int64 `json:"totalEarned,omitempty"`
	TotalStakeTx       *int64 `json:"totalStakeTx,omitempty"`
	TotalStaked        *int64 `json:"totalStaked,omitempty"`
	TotalTx            *int64 `json:"totalTx,omitempty"`
	TotalUsers         *int64 `json:"totalUsers,omitempty"`
	TotalVolume        *int64 `json:"totalVolume,omitempty"`
	TotalVolume24hr    *int64 `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *int64 `json:"totalWithdrawTx,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *int64  `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *Tx     `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset struct {
	Chain  *string `json:"chain,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
}

// Coin defines model for coin.
type Coin struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *int64   `json:"fee,omitempty"`
	Slip       *float64 `json:"slip,omitempty"`
	StakeUnits *int64   `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *int64 `json:"amount,omitempty"`
	Asset  *Asset `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *float64 `json:"asymmetry,omitempty"`
	PriceTarget         *int64   `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *int64   `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxDetailedResponse defines model for TxDetailedResponse.
type TxDetailedResponse []TxDetails

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets/{asset})
	GetAssetInfo(ctx echo.Context, asset string) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/{asset})
	GetPoolsData(ctx echo.Context, asset string) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/{asset})
	GetStakersAddressAndAssetData(ctx echo.Context, address string, asset string) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get transaction// (GET /v1/tx/asset/{asset})
	GetTxDetailsByAsset(ctx echo.Context, asset string) error
	// Get transaction// (GET /v1/tx/{address})
	GetTxDetails(ctx echo.Context, address string) error
	// Get transaction// (GET /v1/tx/{address}/asset/{asset})
	GetTxDetailsByAddressAsset(ctx echo.Context, address string, asset string) error
	// Get transaction// (GET /v1/tx/{address}/txid/{txid})
	GetTxDetailsByAddressTxId(ctx echo.Context, address string, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, asset)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, asset)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, asset)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetTxDetailsByAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAsset(ctx, asset)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, address)
	return err
}

// GetTxDetailsByAddressAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset" -------------
	var asset string

	err = runtime.BindStyledParameter("simple", false, "asset", ctx.Param("asset"), &asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressAsset(ctx, address, asset)
	return err
}

// GetTxDetailsByAddressTxId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetailsByAddressTxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetailsByAddressTxId(ctx, address, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets/:asset", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/:asset", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/:asset", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/tx/asset/:asset", wrapper.GetTxDetailsByAsset)
	router.GET("/v1/tx/:address", wrapper.GetTxDetails)
	router.GET("/v1/tx/:address/asset/:asset", wrapper.GetTxDetailsByAddressAsset)
	router.GET("/v1/tx/:address/txid/:txid", wrapper.GetTxDetailsByAddressTxId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

